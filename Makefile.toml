# Disabling workspace support
[config]
default_to_workspace = false


[tasks.clean]
description = "clean: remove the target directory"
category = "Build"
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
env = { "SQLX_OFFLINE" = "true" }
args = ["build"]
dependencies = ["clean"]

[tasks.check]
description = "build: analyze the workspace and report errors, but don't build object files"
category = "Build"
env = { "SQLX_OFFLINE" = "true" }
command = "cargo"
args = ["check"]

[tasks.test]
description = "test: run the tests"
category = "Check"
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
command = "cargo"
args = ["test", "--no-fail-fast", "--", "--test-threads", "2"]

[tasks.code-coverage]
description = "llvm-cov: generate HTML coverage report"
category = "Check"
command = "cargo"
install_crate = { rustup_component_name = "llvm-tools-preview", binary = "llvm-profdata", test_arg = "--help" }
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
args = ["llvm-cov", "--html"]

[tasks.tarpaulin]
description = "tarpaulin: compute the code coverage"
category = "Check"
install_crate = "cargo-tarpaulin"
command = "cargo"
args = ["tarpaulin", "--out", "html", "--", "--test-threads", "2"]
disabled = true


[tasks.install-kubectl]
description = "Install kubectl if not present"
category = "Setup"
linux.script_runner = "bash"
linux.script = "scripts/install-kubectl-linux.sh"
linux.env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
mac.script_runner = "bash"
mac.script = "scripts/install-kubectl-mac.sh"
mac.env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.setup-kind-cluster]
description = "Create Kind cluster and install Traefik ingress controller"
category = "Kubernetes"
script_runner = "bash"
script = "scripts/setup-kind-cluster.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
dependencies = ["install-kubectl"]

[tasks.deploy-demo-apps]
description = "Deploy httpbin and whoami demo applications to Kind cluster"
category = "Kubernetes"
script_runner = "bash"
script = "scripts/deploy-demo-apps.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.kind-demo]
description = "Complete Kind cluster setup with Traefik and demo apps deployment"
category = "Kubernetes"
dependencies = ["setup-kind-cluster", "deploy-demo-apps"]

[tasks.install-cnpg]
description = "Install CloudNativePG (CNPG) CRDs and wait for availability"
category = "Database"
script_runner = "bash"
script = "scripts/install-cnpg.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.deploy-rc-app]
description = "Deploy rc-app using Helm with health and readiness checks"
category = "Application"
script_runner = "bash"
script = "scripts/deploy-rc-app.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
dependencies = ["install-cnpg"]

[tasks.full-demo]
description = "Complete demo environment: Kind cluster, Traefik, CNPG, demo apps, and rc-app"
category = "Demo"
dependencies = ["kind-demo", "deploy-rc-app"]

# Git Tag Management
# This task retrieves the latest Git tag for use in Docker image tagging
[tasks.get-git-tag]
description = "get-git-tag: get the latest Git tag"
category = "Git"
script_runner = "bash"
script = "scripts/get-git-tag.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Multi-Platform Container Image Building with Git Tag Integration
# This task builds multi-platform container images for rc-web using Podman with the latest Git tag
# Features:
# - Uses latest Git tag as primary version tag
# - Creates additional manifest tags for commit SHA and 'latest'
# - Builds for amd64 and arm64 architectures using podman build --arch
# - Creates multi-platform manifests using podman manifest commands
# - Adds OCI-compliant labels with metadata
# - Includes error handling and visual feedback
# - Uses only Podman (no Docker dependencies)
[tasks.clean-build-cache]
description = "clean-build-cache: clean container build cache to free disk space"
category = "Container"
script_runner = "bash"
script = "scripts/clean-build-cache.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-image]
description = "build-image: build multi-arch container images (amd64/arm64) and create manifests using podman build --arch"
category = "Container"
script_runner = "bash"
script = "scripts/build-image.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Multi-Platform Container Image Publishing with Git Tag Integration
# This task pushes the built multi-platform container manifests to the container registry
# Features:
# - Validates local manifests exist before pushing
# - Pushes all tagged manifests (git tag, commit SHA, latest) for both linux/amd64 and linux/arm64
# - Provides detailed feedback and error handling
# - Uses only Podman manifest push (no Docker dependencies)
# - Requires 'build-image' task to be run first
[tasks.push-image]
description = "push-image: push multi-platform container manifests with Git tags to registry using Podman"
category = "Container"
script_runner = "bash"
script = "scripts/push-image.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Combined Multi-Platform Build and Push Workflow
# This composite task runs both build-image and push-image in sequence
# Builds and pushes multi-platform container images (linux/amd64, linux/arm64) using Podman
# Useful for CI/CD pipelines and one-command deployments
[tasks.build-image-clean]
description = "build-image-clean: build multi-platform container image with aggressive cleanup for low disk space"
category = "Container"
dependencies = ["clean-build-cache"]
run_task = "build-image"

[tasks.build-and-push]
description = "build-and-push: build and push multi-platform container images with Git tags using Podman"
category = "Container"
dependencies = ["build-image", "push-image"]

[tasks.build-and-push-clean]
description = "build-and-push-clean: build and push multi-platform images with cleanup for low disk space environments"
category = "Container"
dependencies = ["clean-build-cache", "build-image", "push-image"]


[tasks.check-disk-space]
description = "check-disk-space: comprehensive disk space monitoring for host and Podman VM"
category = "System"
script_runner = "bash"
script = "scripts/check-disk-space.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.debug]
description = "debug: start rc-web in debug mode using mirrord with dynamic pod detection"
category = "Debug"
script_runner = "bash"
script = "scripts/debug-mirrord.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
