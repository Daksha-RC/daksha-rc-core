# Disabling workspace support
[config]
default_to_workspace = false


[tasks.clean]
description = "clean: remove the target directory"
category = "Build"
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
env = { "SQLX_OFFLINE" = "true" }
args = ["build"]
dependencies = ["clean"]

[tasks.check]
description = "build: analyze the workspace and report errors, but don't build object files"
category = "Build"
env = { "SQLX_OFFLINE" = "true" }
command = "cargo"
args = ["check"]

[tasks.test]
description = "test: run the tests"
category = "Check"
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
command = "cargo"
args = ["test", "--no-fail-fast", "--", "--test-threads", "2"]

[tasks.code-coverage]
description = "llvm-cov: generate HTML coverage report"
category = "Check"
command = "cargo"
install_crate = { rustup_component_name = "llvm-tools-preview", binary = "llvm-profdata", test_arg = "--help" }
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
args = ["llvm-cov", "--html"]

[tasks.tarpaulin]
description = "tarpaulin: compute the code coverage"
category = "Check"
install_crate = "cargo-tarpaulin"
command = "cargo"
args = ["tarpaulin", "--out", "html", "--", "--test-threads", "2"]
disabled = true


[tasks.install-kubectl]
description = "Install kubectl if not present"
category = "Setup"
linux.script_runner = "bash"
linux.script = "scripts/install-kubectl-linux.sh"
linux.env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
mac.script_runner = "bash"
mac.script = "scripts/install-kubectl-mac.sh"
mac.env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.setup-kind-cluster]
description = "Create Kind cluster and install Traefik ingress controller"
category = "Kubernetes"
script_runner = "bash"
script = "scripts/setup-kind-cluster.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
dependencies = ["install-kubectl"]

[tasks.deploy-demo-apps]
description = "Deploy httpbin and whoami demo applications to Kind cluster"
category = "Kubernetes"
script_runner = "bash"
script = "scripts/deploy-demo-apps.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.kind-demo]
description = "Complete Kind cluster setup with Traefik and demo apps deployment"
category = "Kubernetes"
dependencies = ["setup-kind-cluster", "deploy-demo-apps"]

[tasks.install-cnpg]
description = "Install CloudNativePG (CNPG) CRDs and wait for availability"
category = "Database"
script_runner = "bash"
script = "scripts/install-cnpg.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.deploy-rc-app]
description = "Deploy rc-app using Helm with health and readiness checks"
category = "Application"
script_runner = "bash"
script = "scripts/deploy-rc-app.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }
dependencies = ["install-cnpg"]

[tasks.full-demo]
description = "Complete demo environment: Kind cluster, Traefik, CNPG, demo apps, and rc-app"
category = "Demo"
dependencies = ["kind-demo", "deploy-rc-app"]

# Git Tag Management
# This task retrieves the latest Git tag for use in Docker image tagging
[tasks.get-git-tag]
description = "get-git-tag: get the latest Git tag"
category = "Git"
script_runner = "bash"
script = "scripts/get-git-tag.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Container Image Building with Git Tag Integration
# This task builds container images for rc-web using Podman with the latest Git tag
# Features:
# - Uses latest Git tag as primary version tag
# - Creates additional tags for commit SHA and 'latest'
# - Builds for current platform only (use build-image-all for multi-platform)
# - Creates platform-specific image tags (e.g., v0.1.8-amd64)
# - Adds OCI-compliant labels with metadata
# - Includes error handling and visual feedback
# - Uses only Podman (no Docker dependencies)
[tasks.clean-build-cache]
description = "clean-build-cache: clean container build cache to free disk space"
category = "Container"
script_runner = "bash"
script = "scripts/clean-build-cache.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Base Image Building for Improved Caching
# This task builds the base builder image with all build dependencies
# Features:
# - Creates reusable base image with Rust toolchain and build dependencies
# - Significantly speeds up subsequent application builds
# - Preserves base image during cleanup operations
# - Platform-specific base images with proper tagging
# - Only rebuilds if base image is missing or explicitly requested
[tasks.build-base-image]
description = "build-base-image: build reusable base builder image with all build dependencies"
category = "Container"
script_runner = "bash"
script = "scripts/build-base-image.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-image]
description = "build-image: build container image for current platform only with platform-specific tags (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/build-image.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Multi-Platform Container Image Building with Git Tag Integration
# This task builds multi-platform container images for rc-web using Podman with the latest Git tag
# Features:
# - Uses latest Git tag as primary version tag
# - Creates platform-specific tags (e.g., v0.1.8-amd64, v0.1.8-arm64)
# - Creates multi-platform manifests for seamless pulling
# - Builds for amd64 and arm64 architectures using podman build --arch
# - Creates multi-platform manifests using podman manifest commands
# - Adds OCI-compliant labels with metadata
# - Includes error handling and visual feedback
# - Uses only Podman (no Docker dependencies)
[tasks.build-image-all]
description = "build-image-all: build multi-arch container images (amd64/arm64) with platform-specific tags and manifests (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/build-image-all.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Container Image Publishing with Git Tag Integration
# This task pushes the built container images and manifests to the container registry
# Features:
# - Validates local images/manifests exist before pushing
# - Pushes platform-specific images (e.g., v0.1.8-amd64, v0.1.8-arm64)
# - Pushes multi-platform manifests (git tag, commit SHA, latest)
# - Provides detailed feedback and error handling
# - Uses only Podman push (no Docker dependencies)
# - Requires 'build-image' or 'build-image-all' task to be run first
[tasks.push-image]
description = "push-image: push container images and manifests with Git tags to registry using Podman (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/push-image.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Combined Build and Push Workflow
# This composite task runs both build-image and push-image in sequence
# Builds and pushes container images for current platform using Podman
# Useful for CI/CD pipelines and one-command deployments
[tasks.build-image-clean]
description = "build-image-clean: build multi-platform container image with aggressive cleanup for low disk space"
category = "Container"
dependencies = ["clean-build-cache"]
run_task = "build-image"

[tasks.build-and-push]
description = "build-and-push: build and push container images for current platform with Git tags using Podman (TAG=version to override git tag)"
category = "Container"
dependencies = ["build-image", "push-image"]

[tasks.build-and-push-all]
description = "build-and-push-all: build and push multi-platform container images with Git tags using Podman (TAG=version to override git tag)"
category = "Container"
dependencies = ["build-image-all", "push-image"]

[tasks.build-and-push-clean]
description = "build-and-push-clean: build and push images for current platform with cleanup for low disk space environments (TAG=version to override git tag)"
category = "Container"
dependencies = ["clean-build-cache", "build-image", "push-image"]

[tasks.build-and-push-all-clean]
description = "build-and-push-all-clean: build and push multi-platform images with cleanup for low disk space environments (TAG=version to override git tag)"
category = "Container"
dependencies = ["clean-build-cache", "build-image-all", "push-image"]

# Build Examples and Documentation
# This task shows examples of how to use the TAG parameter with build tasks
[tasks.build-examples]
description = "build-examples: show examples of using TAG parameter with build tasks"
category = "Documentation"
script_runner = "bash"
script = "scripts/build-examples.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Parameterized Tasks for Custom Tags
# These tasks allow easy specification of custom tags via command line arguments

[tasks.build-with-tag]
description = "build-with-tag: build container image for current platform with specified tag (usage: cargo make build-with-tag --env TAG=v1.0.0)"
category = "Container"
run_task = "build-image"

[tasks.build-all-with-tag]
description = "build-all-with-tag: build multi-platform container images with specified tag (usage: cargo make build-all-with-tag --env TAG=v1.0.0)"
category = "Container"
run_task = "build-image-all"

[tasks.push-with-tag]
description = "push-with-tag: push container images with specified tag (usage: cargo make push-with-tag --env TAG=v1.0.0)"
category = "Container"
run_task = "push-image"

[tasks.build-and-push-with-tag]
description = "build-and-push-with-tag: build and push current platform images with specified tag (usage: cargo make build-and-push-with-tag --env TAG=v1.0.0)"
category = "Container"
dependencies = ["build-image", "push-image"]

[tasks.build-and-push-all-with-tag]
description = "build-and-push-all-with-tag: build and push multi-platform images with specified tag (usage: cargo make build-and-push-all-with-tag --env TAG=v1.0.0)"
category = "Container"
dependencies = ["build-image-all", "push-image"]


[tasks.check-disk-space]
description = "check-disk-space: comprehensive disk space monitoring for host and Podman VM"
category = "System"
script_runner = "bash"
script = "scripts/check-disk-space.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.debug]
description = "debug: start rc-web in debug mode using mirrord with dynamic pod detection"
category = "Debug"
script_runner = "bash"
script = "scripts/debug-mirrord.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

# Basic Image Tasks
# These tasks build and manage the basic Alpine image using Dockerfile.basic

[tasks.get-basic-image-tag]
description = "get-basic-image-tag: get tag for basic image (from TAG env var or git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/get-basic-image-tag.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-basic-image-amd64]
description = "build-basic-image-amd64: build basic image for amd64 platform (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/build-basic-image-amd64.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-basic-image-arm64]
description = "build-basic-image-arm64: build basic image for arm64 platform (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/build-basic-image-arm64.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-basic-image-all]
description = "build-basic-image-all: build basic image for all platforms (amd64/arm64) with manifests (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/build-basic-image-all.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.push-basic-image]
description = "push-basic-image: push basic images and manifests to registry (TAG=version to override git tag)"
category = "Container"
script_runner = "bash"
script = "scripts/push-basic-image.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-and-push-basic-image]
description = "build-and-push-basic-image: build and push basic images for current platform (TAG=version to override git tag)"
category = "Container"
dependencies = ["build-basic-image-all", "push-basic-image"]

[tasks.build-and-push-basic-image-clean]
description = "build-and-push-basic-image-clean: build and push basic images with cleanup for low disk space (TAG=version to override git tag)"
category = "Container"
dependencies = [
    "clean-build-cache",
    "build-basic-image-all",
    "push-basic-image",
]

# Parameterized Tasks for Basic Image with Custom Tags
[tasks.build-basic-with-tag]
description = "build-basic-with-tag: build basic image for current platform with specified tag (usage: cargo make build-basic-with-tag --env TAG=v1.0.0)"
category = "Container"
run_task = "build-basic-image-all"

[tasks.push-basic-with-tag]
description = "push-basic-with-tag: push basic images with specified tag (usage: cargo make push-basic-with-tag --env TAG=v1.0.0)"
category = "Container"
run_task = "push-basic-image"

[tasks.build-and-push-basic-with-tag]
description = "build-and-push-basic-with-tag: build and push basic images with specified tag (usage: cargo make build-and-push-basic-with-tag --env TAG=v1.0.0)"
category = "Container"
dependencies = ["build-basic-image-all", "push-basic-image"]
