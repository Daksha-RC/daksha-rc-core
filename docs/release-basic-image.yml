name: Release Basic Image

on:
  push:
    branches:
      - "#36_Deploy_to_UTHO_k8s"
  release:
    types: [published, prereleased]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the basic image (e.g., v0.0.2)"
        required: true
        type: string
        default: "v0.0.2"
      platforms:
        description: "Target platforms"
        required: false
        type: choice
        default: "linux/amd64,linux/arm64"
        options:
          - "linux/amd64,linux/arm64"
          - "linux/amd64"
          - "linux/arm64"
      push_to_registry:
        description: "Push to registry"
        required: false
        type: boolean
        default: true
      run_security_scan:
        description: "Run security scan"
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: daksha-rc/rc-basic
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.validate.outputs.tag }}
      should_build: ${{ steps.validate.outputs.should_build }}

    steps:
      - name: Validate inputs and determine tag
        id: validate
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
            echo "🔧 Manual trigger with tag: $TAG"
          elif [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
            echo "🚀 Release trigger with tag: $TAG"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_name }}" = "#36_Deploy_to_UTHO_k8s" ]; then
            # For branch pushes, use git tag or generate a branch-based tag
            if GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
              TAG="$GIT_TAG"
              echo "🏷️ Using git tag: $TAG"
            else
              TAG="branch-$(date +%Y%m%d-%H%M%S)"
              echo "🏷️ Using generated tag: $TAG"
            fi
          else
            echo "❌ Unsupported trigger event: ${{ github.event_name }}"
            exit 1
          fi

          # Validate tag format (relaxed for branch-based tags)
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]] || [[ "$TAG" =~ ^branch-[0-9]+-[0-9]+$ ]]; then
            echo "✅ Tag format valid: $TAG"
          else
            echo "❌ Invalid tag format: $TAG (expected: v1.2.3, v1.2.3-alpha, or branch-YYYYMMDD-HHMMSS)"
            exit 1
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "✅ Tag validation successful: $TAG"

  build-and-push:
    name: Build and Push Basic Image
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'

    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64,linux/arm64

    outputs:
      image-tag: ${{ needs.validate.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
      build-date: ${{ steps.metadata.outputs.build-date }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up build metadata
        id: metadata
        run: |
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          COMMIT_SHA=$(git rev-parse --short HEAD)

          echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          echo "📋 Build metadata:"
          echo "  Tag: ${{ needs.validate.outputs.tag }}"
          echo "  Commit: $COMMIT_SHA"
          echo "  Date: $BUILD_DATE"
          echo "  Actor: ${{ github.actor }}"

      - name: Check system resources
        run: |
          echo "🖥️ System Resources:"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Disk space: $(df -h / | awk 'NR==2 {print $4}')"
          echo ""

          # Check if we have enough resources
          AVAILABLE_GB=$(df / | awk 'NR==2 {print int($4/1024/1024)}')
          if [ $AVAILABLE_GB -lt 10 ]; then
            echo "⚠️ Low disk space warning: ${AVAILABLE_GB}GB available"
          else
            echo "✅ Sufficient disk space: ${AVAILABLE_GB}GB available"
          fi

      - name: Install and configure Podman
        run: |
          echo "🦭 Installing Podman and QEMU..."
          sudo apt-get update -qq
          sudo apt-get install -y podman buildah skopeo qemu-user-static

          # Configure Podman for better performance
          sudo mkdir -p /etc/containers
          echo 'unqualified-search-registries = ["docker.io"]' | sudo tee /etc/containers/registries.conf

          # Show versions
          podman --version
          buildah --version
          skopeo --version

          echo "✅ Podman setup complete"

      - name: Set up QEMU emulation for cross-platform builds
        run: |
          # Enable QEMU emulation for different architectures
          sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
          # Verify QEMU is working
          podman run --rm --platform linux/arm64 alpine:latest uname -m || echo "QEMU setup may need time to initialize"
          echo "✅ QEMU emulation setup complete"

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-make
        uses: davidB/rust-cargo-make@v1
        with:
          version: "0.37.24"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DAKSHA_RC_ACTIONS_WRITE_PAT }}

      - name: Build and push basic image
        id: build
        env:
          TAG: ${{ needs.validate.outputs.tag }}
        run: |
          echo "🏗️ Building and pushing basic image..."
          echo "Tag: $TAG"
          echo "Push to registry: ${{ github.event.inputs.push_to_registry || 'true' }}"

          # Export environment variables for the build
          export TAG="$TAG"
          export BUILDAH_FORMAT=docker

          # Run the cargo make command
          if [ "${{ github.event.inputs.push_to_registry || 'true' }}" = "true" ]; then
            cargo make build-and-push-basic-with-tag
          else
            echo "🔧 Dry run mode - only building without pushing"
            cargo make build-basic-with-tag
          fi

          echo "✅ Build completed successfully"

      - name: Generate and upload build report
        if: always()
        run: |
          echo "📊 Generating build report..."

          cat > build-report.md << EOF
          # Basic Image Build Report

          ## Build Information
          - **Tag:** ${{ needs.validate.outputs.tag }}
          - **Commit:** ${{ steps.metadata.outputs.commit-sha }}
          - **Build Date:** ${{ steps.metadata.outputs.build-date }}
          - **Triggered By:** ${{ github.actor }}
          - **Event:** ${{ github.event_name }}

          ## Images Created
          - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}\` (multi-arch)
          - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}-amd64\`
          - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}-arm64\`
          - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\` (multi-arch)

          ## System Information
          - **Runner:** ${{ runner.os }} ${{ runner.arch }}
          - **Podman Version:** $(podman --version)
          - **Rust Version:** $(rustc --version)

          EOF

          # List final images
          echo "## Final Images" >> build-report.md
          echo "\`\`\`" >> build-report.md
          podman images | grep rc-basic || echo "No rc-basic images found" >> build-report.md
          echo "\`\`\`" >> build-report.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-report-${{ needs.validate.outputs.tag }}
          path: |
            build-report.md
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate, build-and-push]
    if: needs.validate.outputs.should_build == 'true' && (github.event.inputs.run_security_scan != 'false')

    permissions:
      security-events: write
      contents: read

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DAKSHA_RC_ACTIONS_WRITE_PAT }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  test-image:
    name: Test Basic Image
    runs-on: ubuntu-latest
    needs: [validate, build-and-push]
    if: needs.validate.outputs.should_build == 'true'

    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DAKSHA_RC_ACTIONS_WRITE_PAT }}

      - name: Test image functionality
        run: |
          echo "🧪 Testing basic image functionality for ${{ matrix.arch }}..."

          # Pull the specific architecture image
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}-${{ matrix.arch }}"

          if ! podman pull $IMAGE; then
            echo "❌ Failed to pull image: $IMAGE"
            exit 1
          fi

          # Test basic functionality
          echo "Testing basic Alpine functionality..."
          podman run --rm $IMAGE uname -a
          podman run --rm $IMAGE cat /etc/os-release

          # Test architecture
          DETECTED_ARCH=$(podman run --rm $IMAGE uname -m)
          case "${{ matrix.arch }}" in
            amd64) EXPECTED_ARCH="x86_64" ;;
            arm64) EXPECTED_ARCH="aarch64" ;;
          esac

          if [[ "$DETECTED_ARCH" == "$EXPECTED_ARCH" ]]; then
            echo "✅ Architecture test passed: $DETECTED_ARCH"
          else
            echo "❌ Architecture mismatch: expected $EXPECTED_ARCH, got $DETECTED_ARCH"
            exit 1
          fi

          echo "✅ All tests passed for ${{ matrix.arch }}"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [validate, build-and-push, security-scan, test-image]
    if: always() && needs.validate.outputs.should_build == 'true'

    steps:
      - name: Generate summary
        run: |
          echo "## 🎉 Basic Image Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "✅ **Build and Push:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Image Tag:** \`${{ needs.validate.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "🕐 **Build Date:** ${{ needs.build-and-push.outputs.build-date }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build and Push:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "🔒 **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-scan.result }}" = "failure" ]; then
            echo "⚠️ **Security Scan:** Issues Found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Security Scan:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-image.result }}" = "success" ]; then
            echo "🧪 **Image Tests:** All Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Image Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Usage:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull the multi-platform image" >> $GITHUB_STEP_SUMMARY
          echo "podman pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Create success notification
        if: needs.build-and-push.result == 'success'
        run: |
          echo "::notice title=Release Success::Successfully released basic image ${{ needs.validate.outputs.tag }}"

      - name: Create failure notification
        if: needs.build-and-push.result == 'failure'
        run: |
          echo "::error title=Release Failed::Failed to release basic image ${{ needs.validate.outputs.tag }}"
